Non AI Game & AI TICTACTOE



#include <stdio.h>

char board[3][3];
char currentPlayer = 'X';

void initializeBoard() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            board[i][j] = ' ';
}

void printBoard() {
    for (int i = 0; i < 3; i++) {
        printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][2]);
        if (i < 2) printf("---|---|---\n");
    }
}

int checkWin() {
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') ||
            (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' '))
            return 1;
    }
    return ((board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') ||
            (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' '));
}

int isMovesLeft() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ')
                return 1;
    return 0;
}

void computerMove() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                board[i][j] = 'O';
                if (checkWin()) return;
                board[i][j] = ' ';
            }
        }
    }
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ') {
                board[i][j] = 'X';
                if (checkWin()) {
                    board[i][j] = 'O';
                    return;
                }
                board[i][j] = ' ';
            }
        }
    }
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ') {
                board[i][j] = 'O';
                return;
            }
}

void makeMove() {
    int row, col;
    if (currentPlayer == 'X') {
        printf("Enter row and column (0, 1, or 2) for player %c: ", currentPlayer);
        scanf("%d %d", &row, &col);
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ')
            board[row][col] = currentPlayer;
        else {
            printf("Invalid move. Try again.\n");
            makeMove();
        }
        currentPlayer = 'O';
    } else {
        computerMove();
        currentPlayer = 'X';
    }
}

int main() {
    initializeBoard();
    for (int moves = 0; moves < 9 && !checkWin(); moves++) {
        printBoard();
        makeMove();
    }
    printBoard();
    if (checkWin())
        printf("Player %c wins!\n", (currentPlayer == 'X') ? 'O' : 'X');
    else
        printf("It's a draw!\n");
    return 0;
}



AI GAME:
#include <stdio.h>
#include <limits.h>

char board[3][3];
char player = 'X', computer = 'O';

void initializeBoard() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            board[i][j] = ' ';
}

void printBoard() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf(" %c ", board[i][j]);
            if (j < 2) printf("|");
        }
        printf("\n");
        if (i < 2) printf("---|---|---\n");
    }
}

int checkWin(char mark) {
    for (int i = 0; i < 3; i++)
        if ((board[i][0] == mark && board[i][1] == mark && board[i][2] == mark) ||
            (board[0][i] == mark && board[1][i] == mark && board[2][i] == mark))
            return 1;
    return (board[0][0] == mark && board[1][1] == mark && board[2][2] == mark) ||
           (board[0][2] == mark && board[1][1] == mark && board[2][0] == mark);
}

int minimax(int depth, int isMax) {
    if (checkWin(computer)) return 10 - depth;
    if (checkWin(player)) return depth - 10;
    if (depth == 9) return 0;

    int best = isMax ? INT_MIN : INT_MAX, score;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ') {
                board[i][j] = isMax ? computer : player;
                score = minimax(depth + 1, !isMax);
                board[i][j] = ' ';
                best = isMax ? (score > best ? score : best) : (score < best ? score : best);
            }
    return best;
}

void findBestMove() {
    int bestVal = INT_MIN, row = -1, col = -1, score;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] == ' ') {
                board[i][j] = computer;
                score = minimax(0, 0);
                board[i][j] = ' ';
                if (score > bestVal) {
                    bestVal = score;
                    row = i;
                    col = j;
                }
            }
    board[row][col] = computer;
}

void playerMove() {
    int row, col;
    printf("Enter row and column (0, 1, or 2) for player %c: ", player);
    scanf("%d %d", &row, &col);
    if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ')
        board[row][col] = player;
    else {
        printf("Invalid move. Try again.\n");
        playerMove();
    }
}

int main() {
    initializeBoard();
    for (int moves = 0; moves < 9 && !checkWin(player) && !checkWin(computer); moves++) {
        printBoard();
        if (moves % 2 == 0)
            playerMove();
        else
            findBestMove();
    }
    printBoard();
    if (checkWin(player))
        printf("Player %c wins!\n", player);
    else if (checkWin(computer))
        printf("Player %c wins!\n", computer);
    else
        printf("It's a draw!\n");
    return 0;
}


