CSP : NQUEEN, SUDOKU


#include <stdio.h>
#include <stdbool.h>

#define N 8

// Function to print the solution (board configuration)
void print_solution(int board[N][N]) {
    static int solution_count = 0;
    printf("Solution %d:\n", ++solution_count);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
bool is_safe(int board[N][N], int row, int col) {
    int i, j;

    // Check this row on the left side
    for (i = 0; i < col; i++) {
        if (board[row][i]) {
            return false;
        }
    }

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j]) {
            return false;
        }
    }

    return true;
}

// Recursive function to solve N-Queens problem using backtracking
void solve_n_queens(int board[N][N], int col) {
    // Base case: If all queens are placed then print the solution
    if (col >= N) {
        print_solution(board);
        return;
    }

    // Consider this column and try placing this queen in all rows one by one
    for (int i = 0; i < N; i++) {
        // Check if the queen can be placed on board[i][col]
        if (is_safe(board, i, col)) {
            // Place this queen in board[i][col]
            board[i][col] = 1;

            // Recur to place the rest of the queens
            solve_n_queens(board, col + 1);

            // Backtrack and remove the queen to explore other possibilities
            board[i][col] = 0;
        }
    }
}

int main() {
    int board[N][N] = {0}; // Initialize all cells to 0
    solve_n_queens(board, 0); // Solve the N-Queens problem to find all solutions
    return 0;
}




SUDOKU CSP

#include <stdio.h>
#include <stdbool.h>

#define BOARD_SIZE 9

int board[BOARD_SIZE][BOARD_SIZE] = {
    {5, 3, 0, 0, 7, 0, 0, 0, 0},
    {6, 0, 0, 1, 9, 5, 0, 0, 0},
    {0, 9, 8, 0, 0, 0, 0, 6, 0},
    {8, 0, 0, 0, 6, 0, 0, 0, 3},
    {4, 0, 0, 8, 0, 3, 0, 0, 1},
    {7, 0, 0, 0, 2, 0, 0, 0, 6},
    {0, 6, 0, 0, 0, 0, 2, 8, 0},
    {0, 0, 0, 4, 1, 9, 0, 0, 5},
    {0, 0, 0, 0, 8, 0, 0, 7, 9}
};

bool isSafe(int row, int col, int num) {
    for (int x = 0; x < BOARD_SIZE; x++) {
        if (board[row][x] == num || board[x][col] == num || board[row - row % 3 + x / 3][col - col % 3 + x % 3] == num) {
            return false;
        }
    }
    return true;
}

bool solveSudoku() {
    for (int row = 0; row < BOARD_SIZE; row++) {
        for (int col = 0; col < BOARD_SIZE; col++) {
            if (board[row][col] == 0) {
                for (int num = 1; num <= 9; num++) {
                    if (isSafe(row, col, num)) {
                        board[row][col] = num;
                        if (solveSudoku()) return true;
                        board[row][col] = 0;
                    }
                }
                return false;
            }
        }
    }
    return true;
}

void printBoard() {
    for (int r = 0; r < BOARD_SIZE; r++) {
        for (int c = 0; c < BOARD_SIZE; c++) {
            printf("%d ", board[r][c]);
        }
        printf("\n");
        if ((r + 1) % 3 == 0) printf("\n");
    }
}

int main() {
    if (solveSudoku()) {
        printf("Solution found:\n");
        printBoard();
    } else {
        printf("No solution found\n");
    }
    return 0;
}


